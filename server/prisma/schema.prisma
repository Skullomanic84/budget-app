// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// ---------- datasource & generator ----------
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ---------- enums ----------
enum Role {
  OWNER
  ADMIN
  ACCOUNTANT
  USER
}

enum TxnType {
  INCOME
  EXPENSE
}

// ---------- core multi-tenant models ----------
model Org {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members      OrgMember[]
  categories   Category[]
  transactions Transaction[]
  receipts     Receipt[]
  reports      Report[]
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  name         String?
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  memberships  OrgMember[]
  transactions Transaction[]
  receipts     Receipt[]
  reports      Report[] // ⬅ back-relation for Report.user
}

model OrgMember {
  id        String   @id @default(uuid())
  orgId     String
  userId    String
  role      Role     @default(USER)
  createdAt DateTime @default(now())

  org  Org  @relation(fields: [orgId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([orgId, userId])
}

// ---------- budgeting ----------
model Category {
  id        String   @id @default(uuid())
  orgId     String
  name      String
  code      String?
  createdAt DateTime @default(now())

  org          Org           @relation(fields: [orgId], references: [id], onDelete: Cascade)
  transactions Transaction[] // ⬅ back-relation for Transaction.category

  @@unique([orgId, name])
}

model Transaction {
  id          String    @id @default(uuid())
  orgId       String
  userId      String
  type        TxnType
  amount      Decimal   @db.Decimal(14, 2) // ⬅ use Decimal, not Numeric
  currency    String    @default("ZAR")
  date        DateTime
  categoryId  String?
  notes       String?
  isRecurring Boolean   @default(false)
  nextDueDate DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  org      Org       @relation(fields: [orgId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id], onDelete: SetNull)
  category Category? @relation(fields: [categoryId], references: [id])

  receipts Receipt[]
}

model Receipt {
  id             String    @id @default(uuid())
  orgId          String
  transactionId  String?
  userId         String
  fileKey        String
  mimeType       String
  sizeBytes      Int
  ocrText        String?
  vendor         String?
  detectedAmount Decimal?  @db.Decimal(14, 2) // ⬅ use Decimal, not Numeric
  detectedDate   DateTime?
  createdAt      DateTime  @default(now())

  org         Org          @relation(fields: [orgId], references: [id], onDelete: Cascade)
  transaction Transaction? @relation(fields: [transactionId], references: [id])
  user        User         @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([orgId, transactionId])
}

model Report {
  id        String   @id @default(uuid())
  orgId     String
  userId    String
  taxYear   Int
  url       String?
  status    String   @default("pending")
  createdAt DateTime @default(now())

  org  Org  @relation(fields: [orgId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@unique([orgId, taxYear])
}
